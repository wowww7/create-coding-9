import g4p_controls.*;
import controlP5.*;
ControlP5 cp5;
Textfield myTextfield;
ArrayList<Particle> particles = new ArrayList<Particle>();
PFont font;
GTextArea input;
int state = 0;
String text="";


void setup() {
  size(1200, 900);
  background(255);
  font = createFont("微软雅黑", 10);
  textFont(font);
   cp5 = new ControlP5(this);
   
  cp5.addColorWheel("particleColor")
     .setPosition(10, 10)
     .setRGB(color(213, 0, 0))
     .moveTo("settings");
  keyPressed();
  // 生成粒子
  //createParticles(text);
}

void draw() {
  background(255);
  if (state == 0) {
    drawInitialScreen();
  } else if (state == 1) {
    drawSecondScreen();
  }else if (state == 2) {
    drawThirdScreen();
  }
}
void drawInitialScreen() {
  fill(0);
  font = createFont("微软雅黑", 10);
  textFont(font);
  textSize(40);
  text("欢迎来到 张子的粒子", width/2-180, height/2-50);

  // 绘制开始按钮
  fill(150);
  rect(width/2-120, height/2+50, 240, 40);
  fill(0);
  text("Start", width/2-48, height/2+83);
  fill(150);
  rect(width/2-120, height/2+120, 240, 40);
  fill(0);
  text("Instructions", width/2-109, height/2+153);
}
void drawSecondScreen() {

 int chosenColor = cp5.get(ColorWheel.class, "particleColor").getRGB();
  
  
  background(255);
    fill(150);
  rect(width-150, 20, 120, 40);
  font = createFont("Arial", 40);
  textFont(font);
  fill(0);
  text("Return", width-150, 55);
 
  for (Particle p : particles) {
    p.update();
    p.display(chosenColor);
    p.escape();
  }
  createParticles(text);
}
void drawThirdScreen(){
  background(255);
  font = createFont("Arial", 40);
  textFont(font);
  fill(150);
  rect(width-150, 20, 120, 40);
  fill(0);
  text("Return", width-150, 55);
  font = createFont("微软雅黑", 20);
  textFont(font);
  text("1. Project overview",150,50);
  text("2. Project functions",150,130);
  text("3. Human computer interaction mode",150,210);
  text("4. Input and output",150,380);
  text("5. Technical implementation",150,525);
  font = createFont("Arial", 15);
  textFont(font);
  text("(1)Project Name: Particle of Zhang Zi",150,75);
  text("(2)Project objective: To provide a Processing based design tool that converts text into a particle system to meet the ",150,90);
  text("creative expression needs of users.",150,105);
  text("Convert input text into particle shapes(Temporarily only supports English, not Chinese)",150,155);
  text("And when the mouse approaches the particles, they will spread around to move away from the mouse",150,170);
  text("Particle types can be selected: circular, triangular, cubic, pentagram, etc.",150,185);
  text("(1)Interface design:",150,235);
  text("Start interface, with a background and two buttons below. One is Start and the other is Software Description. After ",150,250);
  text("clicking Start, the main interface will appear, which is:",150,265);
  text("Create an adjustable layout interface using the GUI library of Processing. Design intuitive menu bar and effect bar: ",150,280);
  text("Above is the menu bar, which can modify the color of ions. The effect bar is the output particle system and is the main ",150,295);
  text("body of the interface",150,310);
  text("Click on the software description and the text for this proposal will appear",150,325);
  text("(2)User experience optimization:",150,340);
  text("Add an explanation section for users to easily and quickly get started.",150,355);
  text("(1)Input device:",150,395);
  text("Using the Processing library to process input devices such as mice and keyboards.",150,410);
  text("(2)Input content and method:",150,425);
  text("Click the mouse to change the color;",150,440);
  text("Click 1/2/3/4 on the keyboard to change the shape of particles",150,455);
  text("After entering the main interface, directly input text to generate a particle system",150,470);
  text("(3)Output format:",150,485);
  text("Generate images using the Processing library.",150,500);
  text("(1)Development tools: Use Processing language and its related libraries.",150,540);
  text("(2)Testing strategy: Use Processing testing tools to ensure software quality.",150,555);
}
void mousePressed() {
  // 检查鼠标点击位置，判断点击的按钮
  if (state == 0 && mouseX >width/2-120 && mouseX < width/2+120 && mouseY >height/2+50 && mouseY < height/2+90) {
    state = 1; // 切换到第二界面
  }
  if (state == 0 && mouseX >width/2-120 && mouseX < width/2+120 && mouseY >height/2+120 && mouseY < height/2+160) {
    state = 2; // 切换到第三界面 
  }
  if (state == 1 && mouseX >width-150 && mouseX < width-30 && mouseY >20 && mouseY < 60) {
  state = 0; // 切换到第一界面
  }
  if (state == 2 && mouseX >width-150 && mouseX < width-30 && mouseY >20 && mouseY < 60) {
  state = 0; // 切换到第一界面
  }
}
void createParticles(String text) {
  int x = 50;
  int y = 50;
  int spacing = 7;
  
  for (int i = 0; i < text.length(); i++) {
    char c = text.charAt(i);
    float sw = textWidth(c)+120;
    int[] pix = new int[int(sw) * 32];
    loadPixels();
    for (int j = 0; j < pix.length; j++) {
      pix[j] = pixels[j];
    }
    PGraphics pg = createGraphics(int(sw),800);
    pg.beginDraw();
    pg.background(255);
    pg.fill(0);
    pg.textFont(font);
    pg.textSize(30);
    pg.text(c, 0, 60);
    pg.endDraw();
    pg.loadPixels();
    for (int j = 0; j < pg.pixels.length; j++) {
      if (pg.pixels[j] != -1) {
        int px = j % pg.width;
        int py = j / pg.width;
        Particle p = new Particle(x + px * spacing, y + py * spacing, red(pg.pixels[j]), green(pg.pixels[j]), blue(pg.pixels[j]));
        particles.add(p);
      }
    }
    x += sw + spacing;
  }
}
void keyPressed() {
  if (key >= ' ' && key <= '~'&& key !='1'&& key !='2'&& key !='3'&& key !='4') {
    text += key;
  } else if (keyCode == BACKSPACE && text.length() > 0) {
    // 当按下退格键时，删除最后一个字符
    text = text.substring(0, text.length() - 1);
  }
  if (key == '1') {
    for (Particle p : particles) {
      p.shapeType = 0; // 圆形
    }
  } else if (key == '2') {
    for (Particle p : particles) {
      p.shapeType = 1; // 正方形
    }
  } else if (key == '3') {
    for (Particle p : particles) {
      p.shapeType = 2; // 三角形
    }
  } else if (key == '4') {
    for (Particle p : particles) {
      p.shapeType = 3; // 五角星
    }
  }
}

class Particle {
  float x, y, tx, ty;
  float r, g, b;
  float easing = 0.1;
  float maxSpeed = 5;
  int shapeType;

  Particle(float x, float y, float r, float g, float b) {
    this.x = x;
    this.y = y;
    this.tx = x;
    this.ty = y;
    this.r = r;
    this.g = g;
    this.b = b;
  }

  void update() {
    float dx = tx - x;
    float dy = ty - y;
    float distance = sqrt(dx*dx + dy*dy);
    if (distance > 0.1) {
      float targetX = tx - x;
      float targetY = ty - y;
      targetX *= easing;
      targetY *= easing;
      x += constrain(targetX, -maxSpeed, maxSpeed);
      y += constrain(targetY, -maxSpeed, maxSpeed);
    }
  }
  void escape() {
    // 粒子遇鼠标远离
    float distance = dist(x, y, mouseX, mouseY);
    if (distance < 50) {
      float angle = atan2(y - mouseY, x - mouseX);
      x += cos(angle) * 5;
      y += sin(angle) * 5;
    }
  }
  
  void display(int particleColor) {
    noStroke();
    fill(particleColor);
    switch (shapeType) {
    case 0:
      // 绘制圆形
      fill(particleColor);
      ellipse(x, y, 6, 6);
      break;
    case 1:
      rect(x - 10, y - 10, 6, 6);
      // ...
      break;
    case 2:
      triangle(x, y - 6, x - 6, y + 6, x + 6, y + 6);
      // ...
      break;
    case 3:
      {
      // 绘制五角星
      float angle = TWO_PI / 5;
      beginShape();
      for (int i = 0; i < 5; i++) {
        float sx = x + cos(angle * i) * 5;
        float sy = y + sin(angle * i) * 5;
        vertex(sx, sy);
        sx = x + cos(angle * i + angle / 2) * 2;
        sy = y + sin(angle * i + angle / 2) * 2;
        vertex(sx, sy);
      }
      endShape(CLOSE);
    }
      break;
    default:
      break;
  }
}
}
